name: main
on: 
  push:
    branches: [ release ]
  workflow_dispatch:
  
jobs:
   test:
     runs-on: self-hosted
    
     steps:
     - name: Use Node.js
       uses: actions/setup-node@v2
       with: 
         node-version: '16.x'

     - uses: actions/checkout@v2

     - name: Install dependencies
       run: npm install
   test2:
    runs-on: self-hosted
    script: 
      - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
      - mkdir -p ~/.ssh
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      - chmod 700 ~/.ssh/id_rsa
      - eval "$(ssh-agent -s)"
      - ssh-add ~/.ssh/id_rsa
      - ssh-keyscan -t rsa 64.227.1.160 > ~/.ssh/known_hosts
      - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - chmod 644 ~/.ssh/known_hosts
    
    cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    artifacts:
      expire_in: 20 mins
      paths:
      
   deploy:
    runs-on: self-hosted
    needs: test2
    steps:
      uses: farima@51.178.31.43
      name: Deploy to ovh
      with:
      	password: ${{PASSWORD_FARIMA}}
    
    script: 
      - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
      - mkdir -p ~/.ssh
      - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
      - chmod 700 ~/.ssh/id_rsa
      - eval "$(ssh-agent -s)"
      - ssh-add ~/.ssh/id_rsa
      - ssh-keyscan -t rsa 64.227.1.160 > ~/.ssh/known_hosts
      - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
      - chmod 644 ~/.ssh/known_hosts
    
    cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    artifacts:
      expire_in: 20 mins
      paths:
      
   deploys: 
    needs: test2
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to ovh 

   build:
   runs-on: self-hosted
   stage: build
   script:
     - npm run build
     artifacts:
      expire_in: 20 mins
       paths:
     - build
   Deploy To OVH:
    runs-on: self-hosted
    stage: deploy
    script:
     - which rsync || ( apt update -y && apt install rsync -y )
     - ls -la
     - /sbin/ip route|awk '/default/ { print $3 }'
     - ls ./build/
     -/usr/bin/rsync -r ./build/ ${SERVER_UBUNTU}:${SERVER_PATH_UBUNTU}. --exclude-from="exclude.build"
     - echo "Deployed to production server"
    only:
     - main
    when: manual
