image: node:14
name: main
on: 
  push:
    branches: [ release ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  jobs:
  # This workflow contains a job called "build"
  # test:
  #   # The type of runner that the job will run on
  #   runs-on: self-hosted
    
  #   # Steps represent a sequence of tasks that will be executed as part of the job
  #   steps:
  #   - name: Use Node.js
  #     uses: actions/setup-node@v2
  #     with: 
  #       node-version: '16.x'

  #   - uses: actions/checkout@v2

  #   - name: Install dependencies
  #     run: npm install
    
  #   - name: lint
  #     run: npm run lint
    
  #   - name: Unit tests
  #     run: npm run test:ci
    
  # build: 
  #   runs-on: self-hosted

  #   steps:
  #   - name: Use Node.js
  #     uses: actions/setup-node@v2
  #     with: 
  #       node-version: '16.x'

  #   - uses: actions/checkout@v2

  #   - name: Install dependencies
  #     run: npm install
      
  #   - name: Build app
  #     run: npm run build:prod
    
  #   - name: Upload artifact
  #     uses: actions/upload-artifact@v2
  #     with: 
  #       name: devops-test-${{ github.run_id }}-${{ github.run_number }}
  #       path: ./dist/devops-test

  deploy: 
    # needs: build
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v2

    # - name: Dowload artifact
    #   uses: actions/download-artifact@v2
    #   with: 
    #     name: devops-test-${{ github.run_id }}-${{ github.run_number }} 
    #     path: './build'
    # - run: git config user.email "jeremy.bojko@protonmail.com" && git config user.name "Jeremy-Bojko" && git add -A && git commit -m "Updated code"

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
  
  
  
before_script:
  - "which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )"
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
  - chmod 700 ~/.ssh/id_rsa
  - eval "$(ssh-agent -s)"
  - ssh-add ~/.ssh/id_rsa
  - ssh-keyscan -t rsa 64.227.1.160 > ~/.ssh/known_hosts
  - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  - chmod 644 ~/.ssh/known_hosts

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

stages:
  - install
  - build
  - deploy

Install Dependencies:
  runs-on: self-hosted
  stage: install
  script:
    - npm install
    - node -v

Build:
  runs-on: self-hosted
  stage: build
  script:
    - npm run build
  artifacts:
    expire_in: 20 mins
    paths:
      - build

Deploy To OVH:
  runs-on: self-hosted
  stage: deploy
  script:
    - which rsync || ( apt update -y && apt install rsync -y )
    - ls -la
    - /sbin/ip route|awk '/default/ { print $3 }'
    - ls ./build/
    - /usr/bin/rsync -r ./build/ ${SERVER_UBUNTU}:${SERVER_PATH_UBUNTU}. --exclude-from="exclude.build"
    - echo "Deployed to production server"
  only:
    - main
  when: manual
